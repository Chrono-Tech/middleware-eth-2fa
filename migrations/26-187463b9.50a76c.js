
module.exports.id = '26.187463b9.50a76c';

const _ = require('lodash'),
  config = require('../config');

/**
 * @description flow 187463b9.50a76c update
 * @param done
 */
   

module.exports.up = function (done) {
  let coll = this.db.collection(`${_.get(config, 'nodered.mongo.collectionPrefix', '')}noderedstorages`);
  coll.update({'path':'187463b9.50a76c','type':'flows'}, {
    $set: {'path':'187463b9.50a76c','body':[{'id':'79640639.9f6918','type':'amqp in','z':'187463b9.50a76c','name':'event input','topic':'app_eth_chrono_sc.walletcreated','iotype':'3','ioname':'events','noack':'0','durablequeue':'0','durableexchange':'0','server':'4d3746a2.c73cd8','servermode':'0','x':96.07638549804688,'y':185.65624618530273,'wires':[['22812a80.b669b6']]},{'id':'6977c3e0.ae05dc','type':'async-function','z':'187463b9.50a76c','name':'open swap','func':'const Web3 = global.get(\'libs.web3\');\nconst web3URI = global.get(\'settings.sidechain.uri\');\nconst middlewareAddress = global.get(\'settings.sidechain.addresses.middleware\');\nconst ownerAddress = global.get(\'settings.sidechain.addresses.owner\');\nconst crypto = global.get(\'libs.crypto\');\n\nconst keyHash = crypto.createHash(\'sha256\').update(msg.payload.key)\n    .digest(\'hex\');\n\n\n\nconst contracts = global.get(\'contracts\');\nconst web3 = new Web3(new Web3.providers.HttpProvider(web3URI));\n\n\ncontracts.ChronoBankPlatform.setProvider(web3.currentProvider);\ncontracts.ERC20Interface.setProvider(web3.currentProvider);\ncontracts.AtomicSwapERC20.setProvider(web3.currentProvider);\n\n\nconst platform = await contracts.ChronoBankPlatform.deployed();\nawait platform.addAssetPartOwner(msg.symbol, middlewareAddress, {from: ownerAddress, gas: 5700000});\nconst tokenAddress = await platform.proxies(msg.symbol);\nconst token = contracts.ERC20Interface.at(tokenAddress);\nconst swapContract = await contracts.AtomicSwapERC20.deployed();\nawait platform.reissueAsset(msg.symbol, msg.value, {from: middlewareAddress});\nawait contracts.ERC20Interface.at(tokenAddress).approve(swapContract.address, msg.value, {from: middlewareAddress, gas: 5700000});\n\nawait swapContract.open(msg.payload.swap_id, msg.value, tokenAddress, msg.address, `0x${keyHash}`, (new Date()).getTime()/1000 + 120, {from: middlewareAddress, gas: 5700000});\n\n\nmsg.payload = {\n    swapId: msg.payload.swap_id\n};\n\n//node.warn(contracts);\n\nreturn msg;','outputs':1,'noerr':11,'x':1110,'y':300,'wires':[[]]},{'id':'def6fd01.5b8cc','type':'mongo','z':'187463b9.50a76c','model':'','request':'{}','options':'{}','name':'mongo','mode':'1','requestType':'1','dbAlias':'primary.data','x':523.0799102783203,'y':186.6528491973877,'wires':[['de8643d2.8f6ac']]},{'id':'22812a80.b669b6','type':'function','z':'187463b9.50a76c','name':'prepare exchange','func':'const prefix = global.get(\'settings.mongo.collectionPrefix\');\nconst speakeasy = global.get(\'libs.speakeasy\');\n\nmsg.payload = JSON.parse(msg.payload).payload;\n\nconst secret = speakeasy.generateSecret({length: 20});\n\n\nmsg.payload = {\n    model: `${prefix}WalletExchange`, \n    request: {\n       address: msg.payload.wallet,\n       owner: msg.payload.by,\n       secret: secret.base32\n       }\n};\n\n\nreturn msg;','outputs':1,'noerr':0,'x':325.0694580078125,'y':185.56945037841797,'wires':[['def6fd01.5b8cc']]},{'id':'5db14f2f.82d13','type':'http in','z':'187463b9.50a76c','name':'get wallets','url':'/wallet/:owner','method':'get','upload':false,'swaggerDoc':'','x':96,'y':461,'wires':[['fd1422b4.0c53d']]},{'id':'fd1422b4.0c53d','type':'function','z':'187463b9.50a76c','name':'prepare request','func':'const prefix = global.get(\'settings.mongo.collectionPrefix\');\n\n\nmsg.payload = {\n    model: `${prefix}WalletExchange`, \n    request: {\n       owner: msg.req.params.owner\n       }\n};\n\n\nreturn msg;','outputs':1,'noerr':0,'x':276,'y':461,'wires':[['158578b8.227e97']]},{'id':'158578b8.227e97','type':'mongo','z':'187463b9.50a76c','model':'','request':'{}','options':'{}','name':'mongo','mode':'1','requestType':'0','dbAlias':'primary.data','x':454.94091033935547,'y':460.00345039367676,'wires':[['48606ffe.6fdfc']]},{'id':'11a8169f.3c2c39','type':'http response','z':'187463b9.50a76c','name':'','statusCode':'','headers':{},'x':838.9999923706055,'y':459.4583740234375,'wires':[]},{'id':'48606ffe.6fdfc','type':'function','z':'187463b9.50a76c','name':'format response','func':'msg.payload = msg.payload.map(item=>({\n    address: item.address,\n    operations: item.operations,\n    created: item.created\n}));\n\nreturn msg;','outputs':1,'noerr':0,'x':630.0069046020508,'y':460.2361125946045,'wires':[['11a8169f.3c2c39']]},{'id':'4f10423b.4eaa7c','type':'http in','z':'187463b9.50a76c','name':'get secret','url':'/wallet/:wallet','method':'post','upload':false,'swaggerDoc':'','x':96,'y':561,'wires':[['e13f48c9.b78168']]},{'id':'e13f48c9.b78168','type':'function','z':'187463b9.50a76c','name':'prepare request','func':'const prefix = global.get(\'settings.mongo.collectionPrefix\');\nconst EthCrypto = global.get(\'libs.EthCrypto\');\n\nmsg.pubkey = msg.payload.pubkey;\nconst address = EthCrypto.publicKey.toAddress(msg.pubkey).toLowerCase();\n\n\nmsg.payload = {\n    model: `${prefix}WalletExchange`, \n    request: {\n       address: msg.req.params.wallet,\n       owner: msg.req.params.owner\n       }\n};\n\n\nreturn msg;','outputs':1,'noerr':0,'x':266.01734924316406,'y':561,'wires':[['25d007bb.1f4b08']]},{'id':'25d007bb.1f4b08','type':'mongo','z':'187463b9.50a76c','model':'','request':'{}','options':'{}','name':'mongo','mode':'1','requestType':'0','dbAlias':'primary.data','x':446,'y':561,'wires':[['d8dbcd84.5a57a']]},{'id':'97141047.7ff0c','type':'http response','z':'187463b9.50a76c','name':'','statusCode':'','headers':{},'x':818.076416015625,'y':560.4549236297607,'wires':[]},{'id':'d8dbcd84.5a57a','type':'async-function','z':'187463b9.50a76c','name':'pack data','func':'const EthCrypto = global.get(\'libs.EthCrypto\');\n\n\nif(!msg.payload.length){\n    msg.payload = {msg: \'wallet not found\'};\n    return msg;\n}\n\nconst exchange = msg.payload[0];\n\nconst address = EthCrypto.publicKey.toAddress(msg.pubkey).toLowerCase();\n \n node.warn(address);\n  \nif(exchange.owner !== address){\n    msg.payload = {msg: \'wrong pubkey provided\'};\n    return msg;\n}\n\n\nmsg.payload = await EthCrypto.encryptWithPublicKey(msg.pubkey, exchange.secret);\n\n\nreturn msg;','outputs':1,'noerr':1,'x':629.2986679077148,'y':561.8577070236206,'wires':[['97141047.7ff0c']]},{'id':'f3bc0ec7.14473','type':'debug','z':'187463b9.50a76c','name':'','active':true,'console':'false','complete':'false','x':318.07640075683594,'y':86.56598663330078,'wires':[]},{'id':'99dca3ee.f1bbb','type':'amqp in','z':'187463b9.50a76c','name':'event input','topic':'app_eth_chrono_sc.multisigwalletconfirmationneeded','iotype':'3','ioname':'events','noack':'0','durablequeue':'0','durableexchange':'0','server':'4d3746a2.c73cd8','servermode':'0','x':96,'y':281,'wires':[['96125f96.c927e']]},{'id':'e82a0c7d.79d69','type':'mongo','z':'187463b9.50a76c','model':'','request':'{}','options':'{}','name':'mongo','mode':'1','requestType':'2','dbAlias':'primary.data','x':523.0035247802734,'y':281.99660301208496,'wires':[['de8643d2.8f6ac']]},{'id':'96125f96.c927e','type':'function','z':'187463b9.50a76c','name':'add operation','func':'const prefix = global.get(\'settings.mongo.collectionPrefix\');\n\nmsg.payload = JSON.parse(msg.payload).payload;\n\n\nmsg.payload = {\n    model: `${prefix}WalletExchange`, \n    request: [{\n       address: msg.payload.to,\n       owner: msg.payload.initiator,\n       }, {$push: {operations: msg.payload.operation}}]\n};\n\n\nreturn msg;','outputs':1,'noerr':0,'x':314.9930725097656,'y':280.91320419311523,'wires':[['e82a0c7d.79d69']]},{'id':'fe5116e.21303e8','type':'amqp in','z':'187463b9.50a76c','name':'event input','topic':'app_eth_chrono_sc.multisigwalletconfirmation','iotype':'3','ioname':'events','noack':'0','durablequeue':'0','durableexchange':'0','server':'4d3746a2.c73cd8','servermode':'0','x':96,'y':361,'wires':[['70396f13.d2416','f3bc0ec7.14473']]},{'id':'f39649e0.fc3a78','type':'mongo','z':'187463b9.50a76c','model':'','request':'{}','options':'{}','name':'mongo','mode':'1','requestType':'2','dbAlias':'primary.data','x':523.0035247802734,'y':361.99660301208496,'wires':[['de8643d2.8f6ac']]},{'id':'70396f13.d2416','type':'function','z':'187463b9.50a76c','name':'remove operation','func':'const prefix = global.get(\'settings.mongo.collectionPrefix\');\n\nmsg.payload = JSON.parse(msg.payload).payload;\n\n\nmsg.payload = {\n    model: `${prefix}WalletExchange`, \n    request: [{\n       address: msg.payload.self,\n       owner: msg.payload.owner,\n       }, {$pull: {operations: msg.payload.operation}}]\n};\n\n\nreturn msg;','outputs':1,'noerr':0,'x':324.9930725097656,'y':360.91320419311523,'wires':[['f39649e0.fc3a78','f3bc0ec7.14473']]},{'id':'de8643d2.8f6ac','type':'function','z':'187463b9.50a76c','name':'ack message','func':'if(msg.amqpMessage)\n    msg.amqpMessage.ackMsg();\n\n\nreturn msg;','outputs':1,'noerr':0,'x':738.0764312744141,'y':282.2291946411133,'wires':[[]]},{'id':'b7e4a8cb.a5d408','type':'http in','z':'187463b9.50a76c','name':'confirm operation','url':'/wallet/:owner/confirm','method':'post','upload':false,'swaggerDoc':'','x':116,'y':661,'wires':[['ef78c784.5492b8']]},{'id':'ef78c784.5492b8','type':'function','z':'187463b9.50a76c','name':'prepare request','func':'const prefix = global.get(\'settings.mongo.collectionPrefix\');\n\nmsg.token = msg.payload.token;\nmsg.operation = msg.payload.operation;\n\n\n\nmsg.payload = {\n    model: `${prefix}WalletExchange`, \n    request: {\n       address: msg.req.params.wallet\n       }\n};\n\n\nreturn msg;','outputs':1,'noerr':0,'x':356,'y':661,'wires':[['e5088aec.cfc198']]},{'id':'e5088aec.cfc198','type':'mongo','z':'187463b9.50a76c','model':'','request':'{}','options':'{}','name':'mongo','mode':'1','requestType':'0','dbAlias':'primary.data','x':535.9826507568359,'y':661,'wires':[['ec772448.d2bd78']]},{'id':'a70e86a5.394b58','type':'http response','z':'187463b9.50a76c','name':'','statusCode':'','headers':{},'x':908.0590667724609,'y':660.4549236297607,'wires':[]},{'id':'ec772448.d2bd78','type':'async-function','z':'187463b9.50a76c','name':'pack data','func':'const speakeasy = global.get(\'libs.speakeasy\');\nconst factories = global.get("factories"); \n\nif(!msg.payload.length){\n    msg.payload = {msg: \'wallet not found\'};\n    return msg;\n}\n\nconst wallet = msg.payload[0];\n\nconst tokenValidated = speakeasy.totp.verify({\n  secret: wallet.secret,\n  encoding: \'base32\',\n  token: msg.token,\n  window: 6\n});\n \n node.warn(address);\n  \nif(!tokenValidates){\n    msg.payload = {msg: \'wrong token provided\'};\n    return msg;\n}\n\nconst wallectConfirmedTx = await wallet.confirm(msg.operation, {from: oracle, gas: 5700000});\n\nmsg.payload = factories.messages.generic.success;\n\n\nreturn msg;','outputs':1,'noerr':1,'x':719.2813186645508,'y':661.8577070236206,'wires':[['a70e86a5.394b58']]},{'id':'63218200.52f3d','type':'catch','z':'187463b9.50a76c','name':'','scope':null,'x':100,'y':780,'wires':[['17e7fce3.0a6683']]},{'id':'53c08ba9.4d1b74','type':'http request','z':'187463b9.50a76c','name':'','method':'GET','ret':'txt','url':'','x':590,'y':826,'wires':[[]]},{'id':'17e7fce3.0a6683','type':'switch','z':'187463b9.50a76c','name':'admin','property':'amqpMessage','propertyType':'msg','rules':[{'t':'nnull'},{'t':'null'}],'checkall':'true','outputs':2,'x':250,'y':780,'wires':[['6d9e8711.1fc8b8'],['fbddd22f.3e1ae']]},{'id':'fbddd22f.3e1ae','type':'function','z':'187463b9.50a76c','name':'','func':'const factories = global.get("factories"); \n\nmsg.payload = factories.messages.generic.fail;\nreturn msg;\n','outputs':1,'noerr':0,'x':415.07984924316406,'y':826.2430801391602,'wires':[['53c08ba9.4d1b74']]},{'id':'6d9e8711.1fc8b8','type':'function','z':'187463b9.50a76c','name':'nack message','func':'if(msg.amqpMessage)\n    msg.amqpMessage.nackMsg();\n\n\nreturn msg;','outputs':1,'noerr':0,'x':440,'y':760,'wires':[[]]}]}
  }, {upsert: true}, done);
};

module.exports.down = function (done) {
  let coll = this.db.collection(`${_.get(config, 'nodered.mongo.collectionPrefix', '')}noderedstorages`);
  coll.remove({'path':'187463b9.50a76c','type':'flows'}, done);
};
