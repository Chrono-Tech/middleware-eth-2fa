
module.exports.id = '37.7529dc22.ee9104';

const _ = require('lodash'),
  config = require('../config');

/**
 * @description flow 7529dc22.ee9104 update
 * @param done
 */
   

module.exports.up = function (done) {
  let coll = this.db.collection(`${_.get(config, 'nodered.mongo.collectionPrefix', '')}noderedstorages`);
  coll.update({'path':'7529dc22.ee9104','type':'flows'}, {
    $set: {'path':'7529dc22.ee9104','body':[{'id':'8a285563.64b8e8','type':'http in','z':'7529dc22.ee9104','name':'get wallets','url':'/wallets/:owner','method':'get','upload':false,'swaggerDoc':'','x':140,'y':120,'wires':[['2166d8eb.c97448']]},{'id':'2166d8eb.c97448','type':'function','z':'7529dc22.ee9104','name':'prepare request','func':'const prefix = global.get(\'settings.mongo.collectionPrefix\');\n\n\nmsg.payload = {\n    model: `${prefix}WalletExchange`, \n    request: {\n       owner: msg.req.params.owner\n       }\n};\n\n\nreturn msg;','outputs':1,'noerr':0,'x':320,'y':120,'wires':[['72a26dc1.6cf634']]},{'id':'72a26dc1.6cf634','type':'mongo','z':'7529dc22.ee9104','model':'','request':'{}','options':'{}','name':'mongo','mode':'1','requestType':'0','dbAlias':'primary.data','x':498.94091033935547,'y':119.00345039367676,'wires':[['a271c94.f8d3738']]},{'id':'30891a36.3c38a6','type':'http response','z':'7529dc22.ee9104','name':'','statusCode':'','x':882.9999923706055,'y':118.4583740234375,'wires':[]},{'id':'a271c94.f8d3738','type':'function','z':'7529dc22.ee9104','name':'format response','func':'msg.payload = msg.payload.map(item=>({\n    address: item.address,\n    operations: item.operations,\n    created: item.created\n}));\n\nreturn msg;','outputs':1,'noerr':0,'x':674.0069046020508,'y':119.23611259460449,'wires':[['30891a36.3c38a6']]},{'id':'97272e7c.e916c','type':'http in','z':'7529dc22.ee9104','name':'get secret','url':'/wallet/secret','method':'post','upload':false,'swaggerDoc':'','x':140,'y':300,'wires':[['73663853.c561e8']]},{'id':'73663853.c561e8','type':'function','z':'7529dc22.ee9104','name':'prepare request','func':'const prefix = global.get(\'settings.mongo.collectionPrefix\');\nconst EthCrypto = global.get(\'libs.EthCrypto\');\n\nmsg.pubkey = msg.payload.pubkey;\nconst address = EthCrypto.publicKey.toAddress(msg.pubkey).toLowerCase();\n\n\nmsg.payload = {\n    model: `${prefix}UserWalletExchange`, \n    request: {\n       owner: address\n       }\n};\n\n\nreturn msg;','outputs':1,'noerr':0,'x':310.01734924316406,'y':300,'wires':[['c183dfcf.a6a']]},{'id':'c183dfcf.a6a','type':'mongo','z':'7529dc22.ee9104','model':'','request':'{}','options':'{}','name':'mongo','mode':'1','requestType':'0','dbAlias':'primary.data','x':490,'y':300,'wires':[['18abf226.5f7b2e']]},{'id':'18abf226.5f7b2e','type':'async-function','z':'7529dc22.ee9104','name':'pack data','func':'const EthCrypto = global.get(\'libs.EthCrypto\');\nconst exchangeMessages = global.get("factories.messages.exchange"); \nconst speakeasy = global.get(\'libs.speakeasy\');\nconst prefix = global.get(\'settings.mongo.collectionPrefix\');\n\n\nif(!msg.payload.length){\n    msg.payload = exchangeMessages.walletNotFound;\n    return msg;\n}\n\nconst exchange = msg.payload[0];\n\nif(exchange.validated){\n    msg.payload = exchangeMessages.secretAlreadyValidated;\n    return msg;\n}\n\n\nconst address = EthCrypto.publicKey.toAddress(msg.pubkey).toLowerCase();\n \n\nif(exchange.owner !== address){\n    msg.payload = exchangeMessages.wrongPubKey;\n    return msg;\n}\n\n\nconst secret = speakeasy.generateSecret({length: 20});\n    \n    \nmsg.encodedSecret = await EthCrypto.encryptWithPublicKey(msg.pubkey, secret.base32);\n\n\nmsg.payload = {\n    model: `${prefix}UserWalletExchange`, \n    request: [{\n       owner: address\n       }, {secret: secret.base32}]\n    };  \n\n\nreturn msg;','outputs':1,'noerr':1,'x':673.2986679077148,'y':300.8577070236206,'wires':[['774d5447.5ee03c']]},{'id':'2656f1a2.b9812e','type':'http in','z':'7529dc22.ee9104','name':'confirm operation','url':'/wallet/confirm','method':'post','upload':false,'swaggerDoc':'','x':160,'y':460,'wires':[['7d9b12e1.c7d99c']]},{'id':'7d9b12e1.c7d99c','type':'function','z':'7529dc22.ee9104','name':'prepare request','func':'const prefix = global.get(\'settings.mongo.collectionPrefix\');\n\nmsg.token = msg.payload.token;\nmsg.operation = msg.payload.operation;\nmsg.wallet = msg.payload.wallet;\n\n\n\nmsg.payload = {\n    model: `${prefix}WalletExchange`, \n    request: {\n       address: msg.payload.wallet\n       }\n};\n\n\nreturn msg;','outputs':1,'noerr':0,'x':400,'y':460,'wires':[['59702001.d40d4']]},{'id':'59702001.d40d4','type':'mongo','z':'7529dc22.ee9104','model':'','request':'{}','options':'{}','name':'mongo','mode':'1','requestType':'0','dbAlias':'primary.data','x':610,'y':460,'wires':[['62d36e7f.41eb']]},{'id':'4146a4a.53ebb5c','type':'http response','z':'7529dc22.ee9104','name':'','statusCode':'','x':1350,'y':500,'wires':[]},{'id':'28c420ff.53e65','type':'async-function','z':'7529dc22.ee9104','name':'pack data','func':'const speakeasy = global.get(\'libs.speakeasy\');\nconst Web3 = global.get(\'libs.web3\');\nconst Promise = global.get(\'libs.Promise\');\n\nconst exchangeMessages = global.get("factories.messages.exchange"); \nconst provider = global.get("settings.web3.provider"); \nconst contracts = global.get("contracts"); \nconst OracleWallet = global.get("settings.web3.wallet"); \nconst oracleAddress = OracleWallet.getAddressString();\n\n\ncontracts.WalletsManager.setProvider(provider);\ncontracts.Wallet.setProvider(provider);\n\nconst web3 = new Web3(provider);\n\nif(!msg.payload.length){\n    msg.payload = exchangeMessages.walletNotFound;\n    return msg;\n}\n\nconst userWallet = msg.payload[0];\n\nconst tokenValidated = speakeasy.totp.verify({\n  secret: userWallet.secret,\n  encoding: \'base32\',\n  token: msg.token,\n  window: 6\n});\n \nif(!tokenValidated){\n    msg.payload = exchangeMessages.wrongToken;\n    return msg;\n}\n\nconst walletInstance = contracts.Wallet.at(msg.wallet);\nconst walletsManager = await contracts.WalletsManager.deployed();\n\nconst price = await walletsManager.getOraclePrice();\n\n\nconst wallectConfirmedTx = await walletInstance.confirm(msg.operation, {from: oracleAddress, gas: 200000, gasPrice: price / 200000});\n\nmsg.payload = wallectConfirmedTx;\n\n\nreturn msg;','outputs':1,'noerr':4,'x':1200,'y':500,'wires':[['4146a4a.53ebb5c']]},{'id':'56c5b1.41d80a5','type':'catch','z':'7529dc22.ee9104','name':'','scope':null,'x':140,'y':740,'wires':[['c2ea95e1.71cb28','7c879840.988578']]},{'id':'c2ea95e1.71cb28','type':'debug','z':'7529dc22.ee9104','name':'','active':true,'console':'false','complete':'error','x':301.06944274902344,'y':823.5694961547852,'wires':[]},{'id':'c2e70635.e98c38','type':'http response','z':'7529dc22.ee9104','name':'','statusCode':'','x':486,'y':741,'wires':[]},{'id':'7c879840.988578','type':'function','z':'7529dc22.ee9104','name':'','func':'const factories = global.get("factories"); \n\nmsg.payload = factories.messages.generic.fail;\nreturn msg;\n','outputs':1,'noerr':0,'x':311.07984924316406,'y':741.2430801391602,'wires':[['c2e70635.e98c38']]},{'id':'a3c5aeef.aabf7','type':'function','z':'7529dc22.ee9104','name':'transform ','func':'const EthCrypto = global.get(\'libs.EthCrypto\');\nconst prefix = global.get(\'settings.mongo.collectionPrefix\');\n\nmsg.token = msg.payload.token;\n\n\nmsg.payload = {\n    model: `${prefix}UserWalletExchange`, \n    request: {\n       owner: msg.payload.address\n       }\n};\n\nreturn msg;','outputs':1,'noerr':0,'x':340,'y':620,'wires':[['bd7db358.93354']]},{'id':'bd7db358.93354','type':'mongo','z':'7529dc22.ee9104','model':'','request':'{}','options':'{}','name':'mongo','mode':'1','requestType':'0','dbAlias':'primary.data','x':530,'y':620,'wires':[['3dcdad5b.b7b6d2']]},{'id':'e16cf586.f02b38','type':'http response','z':'7529dc22.ee9104','name':'','statusCode':'','x':1390,'y':320,'wires':[]},{'id':'db2a92e5.a3f6','type':'http in','z':'7529dc22.ee9104','name':'confirm secret','url':'/wallet/secret/confirm','method':'post','upload':false,'swaggerDoc':'','x':150,'y':620,'wires':[['a3c5aeef.aabf7']]},{'id':'62d36e7f.41eb','type':'function','z':'7529dc22.ee9104','name':'admin','func':'const prefix = global.get(\'settings.mongo.collectionPrefix\');\nconst exchangeMessages = global.get("factories.messages.exchange"); \n\nmsg.walletExchange = msg.payload[0];\n\nif(!msg.walletExchange){\n    msg.payload = exchangeMessages.walletNotFound;\n    return msg.payload;\n}\n\nmsg.payload = {\n    model: `${prefix}UserWalletExchange`, \n    request: {\n       owner: msg.walletExchange.owner\n       }\n};\n\nreturn msg;','outputs':1,'noerr':0,'x':769.0729522705078,'y':459.2291946411133,'wires':[['760aa5f.407635c']]},{'id':'760aa5f.407635c','type':'switch','z':'7529dc22.ee9104','name':'switch','property':'payload.code','propertyType':'msg','rules':[{'t':'nnull'},{'t':'null'}],'checkall':'true','outputs':2,'x':910.0798492431641,'y':458.98612213134766,'wires':[['e559829a.457b2'],['2427a032.1529d']]},{'id':'e559829a.457b2','type':'http response','z':'7529dc22.ee9104','name':'','statusCode':'','x':1070,'y':420,'wires':[]},{'id':'2427a032.1529d','type':'mongo','z':'7529dc22.ee9104','model':'','request':'{}','options':'{}','name':'mongo','mode':'1','requestType':'0','dbAlias':'primary.data','x':1050,'y':500,'wires':[['28c420ff.53e65']]},{'id':'3dcdad5b.b7b6d2','type':'async-function','z':'7529dc22.ee9104','name':'pack data','func':'const speakeasy = global.get(\'libs.speakeasy\');\nconst prefix = global.get(\'settings.mongo.collectionPrefix\');\nconst exchangeMessages = global.get("factories.messages.exchange"); \n\n\nif(!msg.payload.length){\n    msg.payload = exchangeMessages.walletNotFound;\n    return msg;\n}\n\nconst userWallet = msg.payload[0];\n\nconst tokenValidated = speakeasy.totp.verify({\n  secret: userWallet.secret,\n  encoding: \'base32\',\n  token: msg.token,\n  window: 6\n});\n \nif(!tokenValidated){\n    msg.payload = exchangeMessages.wrongToken;\n    return msg;\n}\n\n\nmsg.payload = {\n    model: `${prefix}UserWalletExchange`, \n    request: [{\n       owner: userWallet.owner\n       }, {validated: true}]\n};\n\n\nreturn msg;','outputs':1,'noerr':0,'x':740,'y':620,'wires':[['c6c9bc2c.58d3f']]},{'id':'c6c9bc2c.58d3f','type':'switch','z':'7529dc22.ee9104','name':'switch','property':'payload.code','propertyType':'msg','rules':[{'t':'nnull'},{'t':'null'}],'checkall':'true','outputs':2,'x':900.4097671508789,'y':617.9965591430664,'wires':[['d40390b5.2a165'],['29b1f581.86336a']]},{'id':'d40390b5.2a165','type':'http response','z':'7529dc22.ee9104','name':'','statusCode':'','x':1030,'y':580,'wires':[]},{'id':'be57f00c.c798d','type':'http response','z':'7529dc22.ee9104','name':'','statusCode':'','x':1350,'y':660,'wires':[]},{'id':'26b3db45.24d104','type':'async-function','z':'7529dc22.ee9104','name':'pack data','func':'const exchangeMessages = global.get("factories.messages.exchange"); \n\nmsg.payload = exchangeMessages.secretValidated;\n\n\nreturn msg;','outputs':1,'noerr':0,'x':1200,'y':660,'wires':[['be57f00c.c798d']]},{'id':'29b1f581.86336a','type':'mongo','z':'7529dc22.ee9104','model':'','request':'{}','options':'{}','name':'mongo','mode':'1','requestType':'2','dbAlias':'primary.data','x':1050,'y':660,'wires':[['26b3db45.24d104']]},{'id':'1c97f532.8b95cb','type':'mongo','z':'7529dc22.ee9104','model':'','request':'{}','options':'{}','name':'mongo','mode':'1','requestType':'2','dbAlias':'primary.data','x':970,'y':320,'wires':[['597eb993.f3fe58']]},{'id':'597eb993.f3fe58','type':'function','z':'7529dc22.ee9104','name':'prepare request','func':'msg.payload = msg.encodedSecret;\nreturn msg;','outputs':1,'noerr':0,'x':1220,'y':320,'wires':[['e16cf586.f02b38']]},{'id':'774d5447.5ee03c','type':'switch','z':'7529dc22.ee9104','name':'switch','property':'payload.code','propertyType':'msg','rules':[{'t':'nnull'},{'t':'null'}],'checkall':'true','outputs':2,'x':830,'y':300,'wires':[['309f38bc.b44238'],['1c97f532.8b95cb']]},{'id':'309f38bc.b44238','type':'http response','z':'7529dc22.ee9104','name':'','statusCode':'','x':970,'y':260,'wires':[]}]}
  }, {upsert: true}, done);
};

module.exports.down = function (done) {
  let coll = this.db.collection(`${_.get(config, 'nodered.mongo.collectionPrefix', '')}noderedstorages`);
  coll.remove({'path':'7529dc22.ee9104','type':'flows'}, done);
};
